
Projket_registerski.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000101c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001228  08001228  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001228  08001228  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001228  08001228  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001228  08001228  00011228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800122c  0800122c  0001122c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001294  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001294  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000130e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000448  00000000  00000000  000213a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000217f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000218b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001451  00000000  00000000  00021938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000edb  00000000  00000000  00022d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000065de  00000000  00000000  00023c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002a242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  0002a298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001194 	.word	0x08001194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08001194 	.word	0x08001194

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <gpio_INIT>:
 *  Created on: Jun 23, 2021
 *      Author: Žan Hertiš
 */
#include "Drivers.h"

void gpio_INIT(){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	///////////////////Clock Enable /////////////////////////////////
	//RCC->AHB2ENR |= 1<<0; //Enable clock GPIOA
	//RCC_AHB2ENR_POINTER |= 1<<0;
	//RCC->AHB2ENR |= 1<<2; // Enable clock GPIOC
	*((uint32_t*)(0x40021000+0x4c)) |= 1<<2 | 1<<0; //GPIOC in GPIOA enable clock
 8000284:	4b37      	ldr	r3, [pc, #220]	; (8000364 <gpio_INIT+0xe4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a36      	ldr	r2, [pc, #216]	; (8000364 <gpio_INIT+0xe4>)
 800028a:	f043 0305 	orr.w	r3, r3, #5
 800028e:	6013      	str	r3, [r2, #0]

	///////////////////PA5 built in led /////////////////////////////
	GPIOA->MODER &= ~(0x3 << (10));
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x1<<10); //output
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<5); //push pull
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f023 0320 	bic.w	r3, r3, #32
 80002be:	6053      	str	r3, [r2, #4]
	////////////////////////////////////////////////////////////

	//////////////PA0 in PA1 led//////////////////////////
	GPIOA->MODER &= ~(0x3 << 0); // izbris
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ca:	f023 0303 	bic.w	r3, r3, #3
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << 0); //alternate function mode PA0
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<0); //push pull PA0
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6053      	str	r3, [r2, #4]
	GPIOA->AFRL |= 0x1<<0; //AF1 na PA0
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f4:	6a1b      	ldr	r3, [r3, #32]
 80002f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6213      	str	r3, [r2, #32]

	GPIOA->MODER &= ~(0x3 << 2); //izbris
 8000300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030a:	f023 030c 	bic.w	r3, r3, #12
 800030e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << 2); //alternate function mode PA1
 8000310:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= (1<<1); //open drain PA1
 8000320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6053      	str	r3, [r2, #4]
	GPIOA->AFRL |= 0x1<<4; //AF1 na PA1
 8000330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6213      	str	r3, [r2, #32]
	////////////PC13 tipka/////////////////////
	GPIOC->MODER &= ~(0x3 << (26)); //input
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <gpio_INIT+0xe8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a08      	ldr	r2, [pc, #32]	; (8000368 <gpio_INIT+0xe8>)
 8000346:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800034a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(0x3 << (26)); //no pull up no pull down
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <gpio_INIT+0xe8>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <gpio_INIT+0xe8>)
 8000352:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000356:	60d3      	str	r3, [r2, #12]
	//////////////////////////////////////////////

}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	4002104c 	.word	0x4002104c
 8000368:	48000800 	.word	0x48000800

0800036c <tim_INIT>:

void tim_INIT(){
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	//RCC->APB1ENR1 |= 1<<0;
	*((uint32_t*)(0x40021000+0x58)) |= 1<<0; //Timer 2 clock enable
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <tim_INIT+0x60>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a15      	ldr	r2, [pc, #84]	; (80003cc <tim_INIT+0x60>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]
	//*((uint32_t*)(0x40021000+0x58)) |= 1<<3; // 32 butni Timer 5 clock enable
	*((uint32_t*)(0x40021000+0x58)) |= 1<<1; // 16-bitni Timer 3
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <tim_INIT+0x60>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <tim_INIT+0x60>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	6013      	str	r3, [r2, #0]
	///////////////////TIM5//////////////////////////////////
	TIM3->CR1 &= ~(1<<7); //ARPE: TIMx_ARR register is not buffered
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <tim_INIT+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <tim_INIT+0x64>)
 800038e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000392:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(0x3<<5); //CMS: 00: Edge-aligned mode.
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <tim_INIT+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <tim_INIT+0x64>)
 800039a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800039e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(1<<4); //DIR(direction) 0-up counter
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <tim_INIT+0x64>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <tim_INIT+0x64>)
 80003a6:	f023 0310 	bic.w	r3, r3, #16
 80003aa:	6013      	str	r3, [r2, #0]

	TIM3->PSC = 4000-1; //presclaer = 100
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <tim_INIT+0x64>)
 80003ae:	f640 729f 	movw	r2, #3999	; 0xf9f
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM3->ARR = 0xffffffff-1; // auto reload register = največja 32 bitna vrednost

	TIM3->CR1 |= 1<<0; // Counter enable (1)
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <tim_INIT+0x64>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <tim_INIT+0x64>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]



}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021058 	.word	0x40021058
 80003d0:	40000400 	.word	0x40000400

080003d4 <PWM_INIT>:

void PWM_INIT(){
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	//CC1S- capture-compare; 00 - channel 1 output
	TIM2->CCMR1 &= ~(1<<0);
 80003d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(1<<1);
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f2:	f023 0302 	bic.w	r3, r3, #2
 80003f6:	6193      	str	r3, [r2, #24]

	//CC2S - capture-compare; 00 - channel 2 output
	TIM2->CCMR1 &= ~(1<<8);
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000406:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(1<<9);
 8000408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000412:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000416:	6193      	str	r3, [r2, #24]

	TIM2->CCMR1 |= (0x3<<5);// OC1M 0110 PWM 1 mode upcounter - channel 1
 8000418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000422:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000426:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0x3<<13);// OC2M 0110 PWM 1 mode upcounter - channel 2
 8000428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000432:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000436:	6193      	str	r3, [r2, #24]

	TIM2->CCMR1 |= 1<<3; // OC1PE Preload register on TIMx_CCR1 enabled (preload enable)
 8000438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= 1<<11; //OC2PE: Output compare 2 preload enable
 8000448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000456:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= 1<<0; // CC1E Capture/Compare 1 output enable.
 8000458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045c:	6a1b      	ldr	r3, [r3, #32]
 800045e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 1<<4; // CC2E: Capture/Compare 2 output enable.
 8000468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800046c:	6a1b      	ldr	r3, [r3, #32]
 800046e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6213      	str	r3, [r2, #32]

	TIM2->CR1 &= ~(0x3<<5); //CMS: 00: Edge-aligned mode.
 8000478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000482:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000486:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(1<<4); //DIR(direction) 0-up counter
 8000488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]

	TIM2->CR1 &= ~(1<<7); //ARPE: TIMx_ARR register is not buffered
 8000498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004a6:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= 1<<0; // Counter enable (1)
 80004a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 100; //presclaer = 100
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004bc:	2264      	movs	r2, #100	; 0x64
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 400; // auto reload register = 400
 80004c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c





}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <button_pushed>:

void ledON(void){
	GPIOA->ODR |= (1<<5); //led ON
}

uint8_t button_pushed (void){
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	return !((GPIOC->IDR) & (1<<13));
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <button_pushed+0x20>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	48000800 	.word	0x48000800

080004f8 <USART2_INIT>:

void USART2_INIT(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	*((uint32_t*)(0x40021000+0x58)) |= 1<<17; // USART2 clock enable
 80004fc:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <USART2_INIT+0xcc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a30      	ldr	r2, [pc, #192]	; (80005c4 <USART2_INIT+0xcc>)
 8000502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000506:	6013      	str	r3, [r2, #0]

	//PA2->Tx
	//PA3->Rx

	GPIOA->MODER &= ~(0x3 << 4); // izbris
 8000508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000512:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000516:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << 4); //alternate function mode PA2
 8000518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000522:	f043 0320 	orr.w	r3, r3, #32
 8000526:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(0x3 << 6); // izbris
 8000528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000532:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000536:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << 6); //alternate function mode PA3
 8000538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000546:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER |= 1<<3; // Rx-> open drain
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	f043 0308 	orr.w	r3, r3, #8
 8000556:	6053      	str	r3, [r2, #4]

	GPIOA->AFRL |= 0x7<<8; // AF7 za PA2
 8000558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055c:	6a1b      	ldr	r3, [r3, #32]
 800055e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000566:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL |= 0x7<<12; // AF7 za PA3
 8000568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056c:	6a1b      	ldr	r3, [r3, #32]
 800056e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000572:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000576:	6213      	str	r3, [r2, #32]

	USART2->CR1 &= ~(1<<0); //disable USART2
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <USART2_INIT+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <USART2_INIT+0xd0>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= 0x3<<2; // enable Tx and Rx
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <USART2_INIT+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <USART2_INIT+0xd0>)
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	6013      	str	r3, [r2, #0]
	 * Baud Rate:
	 * USARTDIV = 4000000/115200 = 34,72 -> 35 = 0x23
	 *
	 * */

	USART2->BRR = 0x23;
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <USART2_INIT+0xd0>)
 8000592:	2223      	movs	r2, #35	; 0x23
 8000594:	60da      	str	r2, [r3, #12]

	////////////////////// Interupt nastavitve //////////////////

	USART2->CR1 |= 1<<5; // enable receive interupt: RXNEIE
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <USART2_INIT+0xd0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <USART2_INIT+0xd0>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	6013      	str	r3, [r2, #0]
	NVIC->ISER[1] |= 1<< (38-32); // 38 linija interupta
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <USART2_INIT+0xd4>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <USART2_INIT+0xd4>)
 80005a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ac:	6053      	str	r3, [r2, #4]

	////////////////////////////////////////////////////////////
	USART2->CR1 |= 1<<0; // enable usart2
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <USART2_INIT+0xd0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <USART2_INIT+0xd0>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40021058 	.word	0x40021058
 80005c8:	40004400 	.word	0x40004400
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <usart_transmit>:


void usart_transmit (uint8_t *tx_buffer, uint8_t dolzina)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
	uint8_t poslji;
	uint8_t st_poslanih_znakov = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]

	while (1)
	{
		poslji = *tx_buffer++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	607a      	str	r2, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	73bb      	strb	r3, [r7, #14]
		if(poslji==0 || st_poslanih_znakov == dolzina) break;
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d011      	beq.n	8000614 <usart_transmit+0x44>
 80005f0:	7bfa      	ldrb	r2, [r7, #15]
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d00d      	beq.n	8000614 <usart_transmit+0x44>

				while(!(USART2->ISR & (1<<7))); // TXE -> čakamo da pošlje
 80005f8:	bf00      	nop
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <usart_transmit+0x60>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <usart_transmit+0x2a>
				USART2->TDR = poslji & 0xff;
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <usart_transmit+0x60>)
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	6293      	str	r3, [r2, #40]	; 0x28
				st_poslanih_znakov++;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	3301      	adds	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
		poslji = *tx_buffer++;
 8000612:	e7e5      	b.n	80005e0 <usart_transmit+0x10>

	}

	while(!(USART2->ISR & (1<<6))); // TC - transmission complete
 8000614:	bf00      	nop
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <usart_transmit+0x60>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f9      	beq.n	8000616 <usart_transmit+0x46>
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40004400 	.word	0x40004400

08000634 <usart_receive>:

void usart_receive(uint8_t *rx_buffer, uint16_t dolzina){
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
	uint8_t prejmi;
	uint8_t i = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	73bb      	strb	r3, [r7, #14]

	while(1){

		if(i == dolzina || prejmi == '\r') break;
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	b29b      	uxth	r3, r3
 8000648:	887a      	ldrh	r2, [r7, #2]
 800064a:	429a      	cmp	r2, r3
 800064c:	d015      	beq.n	800067a <usart_receive+0x46>
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	2b0d      	cmp	r3, #13
 8000652:	d012      	beq.n	800067a <usart_receive+0x46>
		while(!(USART2->ISR & (1<<5))); // RXNE
 8000654:	bf00      	nop
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <usart_receive+0x58>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f9      	beq.n	8000656 <usart_receive+0x22>
		prejmi = USART2->RDR & 0xff;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <usart_receive+0x58>)
 8000664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000666:	73fb      	strb	r3, [r7, #15]
		rx_buffer[i] = prejmi;
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	7bfa      	ldrb	r2, [r7, #15]
 8000670:	701a      	strb	r2, [r3, #0]
		i++;
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	3301      	adds	r3, #1
 8000676:	73bb      	strb	r3, [r7, #14]
		if(i == dolzina || prejmi == '\r') break;
 8000678:	e7e4      	b.n	8000644 <usart_receive+0x10>
	}
	prejmi = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40004400 	.word	0x40004400

08000690 <main>:
#include "Drivers.h"



int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
	gpio_INIT();
 8000696:	f7ff fdf3 	bl	8000280 <gpio_INIT>
	tim_INIT();
 800069a:	f7ff fe67 	bl	800036c <tim_INIT>
	PWM_INIT();
 800069e:	f7ff fe99 	bl	80003d4 <PWM_INIT>
	USART2_INIT();
 80006a2:	f7ff ff29 	bl	80004f8 <USART2_INIT>
	TIM2->CCR1 = 0;
 80006a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 400;
 80006ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006b6:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t tx_buffer[20] = {0};
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
	uint8_t rx_buffer[20];
	uint32_t casovnik;
    /* Loop forever */
	while(1)
	{
		  if (button_pushed())
 80006ca:	f7ff ff03 	bl	80004d4 <button_pushed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <main+0x8c>
		  {
			  if ((TIM2->CCR1) == 400)
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006de:	d109      	bne.n	80006f4 <main+0x64>
			  {
				  TIM2->CCR1 = 0;
 80006e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM2->CCR2 = 400;
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006f0:	639a      	str	r2, [r3, #56]	; 0x38
 80006f2:	e00d      	b.n	8000710 <main+0x80>
			  }else
			  {
				  TIM2->CCR1 += 40;
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fe:	3328      	adds	r3, #40	; 0x28
 8000700:	6353      	str	r3, [r2, #52]	; 0x34
				  TIM2->CCR2 -= 40;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070c:	3b28      	subs	r3, #40	; 0x28
 800070e:	6393      	str	r3, [r2, #56]	; 0x38
			  }
			   while (button_pushed()){}
 8000710:	bf00      	nop
 8000712:	f7ff fedf 	bl	80004d4 <button_pushed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1fa      	bne.n	8000712 <main+0x82>
			}


		 usart_receive(rx_buffer, 10);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	210a      	movs	r1, #10
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff87 	bl	8000634 <usart_receive>
		 if (strstr(rx_buffer, "TIME__SHOW"))
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4929      	ldr	r1, [pc, #164]	; (80007d0 <main+0x140>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f90e 	bl	800094c <strstr>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01d      	beq.n	8000772 <main+0xe2>
		 { 		casovnik = TIM3->CNT;
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0x144>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
			 	sprintf(tx_buffer, "%d ms\n", casovnik);
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000742:	4925      	ldr	r1, [pc, #148]	; (80007d8 <main+0x148>)
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f8e1 	bl	800090c <siprintf>
			 	usart_transmit(tx_buffer, strlen(tx_buffer));
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff36 	bl	80005d0 <usart_transmit>
			 	memset(rx_buffer, 0, sizeof rx_buffer);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2214      	movs	r2, #20
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f8c6 	bl	80008fc <memset>
 8000770:	e7ab      	b.n	80006ca <main+0x3a>

		 } else if (strstr(rx_buffer, "TIME_RESET"))
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4919      	ldr	r1, [pc, #100]	; (80007dc <main+0x14c>)
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f8e8 	bl	800094c <strstr>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d020      	beq.n	80007c4 <main+0x134>
		 {
			 TIM3->CNT = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <main+0x144>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
			 casovnik = TIM3->CNT;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <main+0x144>)
 800078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
			 sprintf(tx_buffer, "Cas resetiran: %d ms\n", casovnik);
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000794:	4912      	ldr	r1, [pc, #72]	; (80007e0 <main+0x150>)
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8b8 	bl	800090c <siprintf>
			 usart_transmit(tx_buffer, strlen(tx_buffer));
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd15 	bl	80001d0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff0d 	bl	80005d0 <usart_transmit>
			 memset(rx_buffer, 0, sizeof rx_buffer);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2214      	movs	r2, #20
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f89d 	bl	80008fc <memset>
 80007c2:	e782      	b.n	80006ca <main+0x3a>
		 } else
		 {
			 usart_transmit("Neveljaven ukaz", 20);
 80007c4:	2114      	movs	r1, #20
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x154>)
 80007c8:	f7ff ff02 	bl	80005d0 <usart_transmit>
		  if (button_pushed())
 80007cc:	e77d      	b.n	80006ca <main+0x3a>
 80007ce:	bf00      	nop
 80007d0:	080011ac 	.word	0x080011ac
 80007d4:	40000400 	.word	0x40000400
 80007d8:	080011b8 	.word	0x080011b8
 80007dc:	080011c0 	.word	0x080011c0
 80007e0:	080011cc 	.word	0x080011cc
 80007e4:	080011e4 	.word	0x080011e4

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f000 f846 	bl	80008a8 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20018000 	.word	0x20018000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000080 	.word	0x20000080
 8000850:	200000a0 	.word	0x200000a0

08000854 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000856:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000858:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000882:	f000 f817 	bl	80008b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff ff03 	bl	8000690 <main>

0800088a <LoopForever>:

LoopForever:
    b LoopForever
 800088a:	e7fe      	b.n	800088a <LoopForever>
  ldr   r0, =_estack
 800088c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000898:	08001230 	.word	0x08001230
  ldr r2, =_sbss
 800089c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008a0:	2000009c 	.word	0x2000009c

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <__errno>:
 80008a8:	4b01      	ldr	r3, [pc, #4]	; (80008b0 <__errno+0x8>)
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000000 	.word	0x20000000

080008b4 <__libc_init_array>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	4d0d      	ldr	r5, [pc, #52]	; (80008ec <__libc_init_array+0x38>)
 80008b8:	4c0d      	ldr	r4, [pc, #52]	; (80008f0 <__libc_init_array+0x3c>)
 80008ba:	1b64      	subs	r4, r4, r5
 80008bc:	10a4      	asrs	r4, r4, #2
 80008be:	2600      	movs	r6, #0
 80008c0:	42a6      	cmp	r6, r4
 80008c2:	d109      	bne.n	80008d8 <__libc_init_array+0x24>
 80008c4:	4d0b      	ldr	r5, [pc, #44]	; (80008f4 <__libc_init_array+0x40>)
 80008c6:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__libc_init_array+0x44>)
 80008c8:	f000 fc64 	bl	8001194 <_init>
 80008cc:	1b64      	subs	r4, r4, r5
 80008ce:	10a4      	asrs	r4, r4, #2
 80008d0:	2600      	movs	r6, #0
 80008d2:	42a6      	cmp	r6, r4
 80008d4:	d105      	bne.n	80008e2 <__libc_init_array+0x2e>
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008dc:	4798      	blx	r3
 80008de:	3601      	adds	r6, #1
 80008e0:	e7ee      	b.n	80008c0 <__libc_init_array+0xc>
 80008e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e6:	4798      	blx	r3
 80008e8:	3601      	adds	r6, #1
 80008ea:	e7f2      	b.n	80008d2 <__libc_init_array+0x1e>
 80008ec:	08001228 	.word	0x08001228
 80008f0:	08001228 	.word	0x08001228
 80008f4:	08001228 	.word	0x08001228
 80008f8:	0800122c 	.word	0x0800122c

080008fc <memset>:
 80008fc:	4402      	add	r2, r0
 80008fe:	4603      	mov	r3, r0
 8000900:	4293      	cmp	r3, r2
 8000902:	d100      	bne.n	8000906 <memset+0xa>
 8000904:	4770      	bx	lr
 8000906:	f803 1b01 	strb.w	r1, [r3], #1
 800090a:	e7f9      	b.n	8000900 <memset+0x4>

0800090c <siprintf>:
 800090c:	b40e      	push	{r1, r2, r3}
 800090e:	b500      	push	{lr}
 8000910:	b09c      	sub	sp, #112	; 0x70
 8000912:	ab1d      	add	r3, sp, #116	; 0x74
 8000914:	9002      	str	r0, [sp, #8]
 8000916:	9006      	str	r0, [sp, #24]
 8000918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <siprintf+0x38>)
 800091e:	9107      	str	r1, [sp, #28]
 8000920:	9104      	str	r1, [sp, #16]
 8000922:	4909      	ldr	r1, [pc, #36]	; (8000948 <siprintf+0x3c>)
 8000924:	f853 2b04 	ldr.w	r2, [r3], #4
 8000928:	9105      	str	r1, [sp, #20]
 800092a:	6800      	ldr	r0, [r0, #0]
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	a902      	add	r1, sp, #8
 8000930:	f000 f87e 	bl	8000a30 <_svfiprintf_r>
 8000934:	9b02      	ldr	r3, [sp, #8]
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	b01c      	add	sp, #112	; 0x70
 800093c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000940:	b003      	add	sp, #12
 8000942:	4770      	bx	lr
 8000944:	20000000 	.word	0x20000000
 8000948:	ffff0208 	.word	0xffff0208

0800094c <strstr>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	780c      	ldrb	r4, [r1, #0]
 8000950:	b164      	cbz	r4, 800096c <strstr+0x20>
 8000952:	4603      	mov	r3, r0
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	1c5e      	adds	r6, r3, #1
 800095a:	b90a      	cbnz	r2, 8000960 <strstr+0x14>
 800095c:	4610      	mov	r0, r2
 800095e:	e005      	b.n	800096c <strstr+0x20>
 8000960:	4294      	cmp	r4, r2
 8000962:	d108      	bne.n	8000976 <strstr+0x2a>
 8000964:	460d      	mov	r5, r1
 8000966:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800096a:	b902      	cbnz	r2, 800096e <strstr+0x22>
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000972:	4297      	cmp	r7, r2
 8000974:	d0f7      	beq.n	8000966 <strstr+0x1a>
 8000976:	4633      	mov	r3, r6
 8000978:	e7ec      	b.n	8000954 <strstr+0x8>

0800097a <__ssputs_r>:
 800097a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800097e:	688e      	ldr	r6, [r1, #8]
 8000980:	429e      	cmp	r6, r3
 8000982:	4682      	mov	sl, r0
 8000984:	460c      	mov	r4, r1
 8000986:	4690      	mov	r8, r2
 8000988:	461f      	mov	r7, r3
 800098a:	d838      	bhi.n	80009fe <__ssputs_r+0x84>
 800098c:	898a      	ldrh	r2, [r1, #12]
 800098e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000992:	d032      	beq.n	80009fa <__ssputs_r+0x80>
 8000994:	6825      	ldr	r5, [r4, #0]
 8000996:	6909      	ldr	r1, [r1, #16]
 8000998:	eba5 0901 	sub.w	r9, r5, r1
 800099c:	6965      	ldr	r5, [r4, #20]
 800099e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009a6:	3301      	adds	r3, #1
 80009a8:	444b      	add	r3, r9
 80009aa:	106d      	asrs	r5, r5, #1
 80009ac:	429d      	cmp	r5, r3
 80009ae:	bf38      	it	cc
 80009b0:	461d      	movcc	r5, r3
 80009b2:	0553      	lsls	r3, r2, #21
 80009b4:	d531      	bpl.n	8000a1a <__ssputs_r+0xa0>
 80009b6:	4629      	mov	r1, r5
 80009b8:	f000 fb46 	bl	8001048 <_malloc_r>
 80009bc:	4606      	mov	r6, r0
 80009be:	b950      	cbnz	r0, 80009d6 <__ssputs_r+0x5c>
 80009c0:	230c      	movs	r3, #12
 80009c2:	f8ca 3000 	str.w	r3, [sl]
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009cc:	81a3      	strh	r3, [r4, #12]
 80009ce:	f04f 30ff 	mov.w	r0, #4294967295
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	6921      	ldr	r1, [r4, #16]
 80009d8:	464a      	mov	r2, r9
 80009da:	f000 fabd 	bl	8000f58 <memcpy>
 80009de:	89a3      	ldrh	r3, [r4, #12]
 80009e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	81a3      	strh	r3, [r4, #12]
 80009ea:	6126      	str	r6, [r4, #16]
 80009ec:	6165      	str	r5, [r4, #20]
 80009ee:	444e      	add	r6, r9
 80009f0:	eba5 0509 	sub.w	r5, r5, r9
 80009f4:	6026      	str	r6, [r4, #0]
 80009f6:	60a5      	str	r5, [r4, #8]
 80009f8:	463e      	mov	r6, r7
 80009fa:	42be      	cmp	r6, r7
 80009fc:	d900      	bls.n	8000a00 <__ssputs_r+0x86>
 80009fe:	463e      	mov	r6, r7
 8000a00:	4632      	mov	r2, r6
 8000a02:	6820      	ldr	r0, [r4, #0]
 8000a04:	4641      	mov	r1, r8
 8000a06:	f000 fab5 	bl	8000f74 <memmove>
 8000a0a:	68a3      	ldr	r3, [r4, #8]
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	1b9b      	subs	r3, r3, r6
 8000a10:	4432      	add	r2, r6
 8000a12:	60a3      	str	r3, [r4, #8]
 8000a14:	6022      	str	r2, [r4, #0]
 8000a16:	2000      	movs	r0, #0
 8000a18:	e7db      	b.n	80009d2 <__ssputs_r+0x58>
 8000a1a:	462a      	mov	r2, r5
 8000a1c:	f000 fb6e 	bl	80010fc <_realloc_r>
 8000a20:	4606      	mov	r6, r0
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d1e1      	bne.n	80009ea <__ssputs_r+0x70>
 8000a26:	6921      	ldr	r1, [r4, #16]
 8000a28:	4650      	mov	r0, sl
 8000a2a:	f000 fabd 	bl	8000fa8 <_free_r>
 8000a2e:	e7c7      	b.n	80009c0 <__ssputs_r+0x46>

08000a30 <_svfiprintf_r>:
 8000a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a34:	4698      	mov	r8, r3
 8000a36:	898b      	ldrh	r3, [r1, #12]
 8000a38:	061b      	lsls	r3, r3, #24
 8000a3a:	b09d      	sub	sp, #116	; 0x74
 8000a3c:	4607      	mov	r7, r0
 8000a3e:	460d      	mov	r5, r1
 8000a40:	4614      	mov	r4, r2
 8000a42:	d50e      	bpl.n	8000a62 <_svfiprintf_r+0x32>
 8000a44:	690b      	ldr	r3, [r1, #16]
 8000a46:	b963      	cbnz	r3, 8000a62 <_svfiprintf_r+0x32>
 8000a48:	2140      	movs	r1, #64	; 0x40
 8000a4a:	f000 fafd 	bl	8001048 <_malloc_r>
 8000a4e:	6028      	str	r0, [r5, #0]
 8000a50:	6128      	str	r0, [r5, #16]
 8000a52:	b920      	cbnz	r0, 8000a5e <_svfiprintf_r+0x2e>
 8000a54:	230c      	movs	r3, #12
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	e0d1      	b.n	8000c02 <_svfiprintf_r+0x1d2>
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	616b      	str	r3, [r5, #20]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9309      	str	r3, [sp, #36]	; 0x24
 8000a66:	2320      	movs	r3, #32
 8000a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a70:	2330      	movs	r3, #48	; 0x30
 8000a72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000c1c <_svfiprintf_r+0x1ec>
 8000a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a7a:	f04f 0901 	mov.w	r9, #1
 8000a7e:	4623      	mov	r3, r4
 8000a80:	469a      	mov	sl, r3
 8000a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a86:	b10a      	cbz	r2, 8000a8c <_svfiprintf_r+0x5c>
 8000a88:	2a25      	cmp	r2, #37	; 0x25
 8000a8a:	d1f9      	bne.n	8000a80 <_svfiprintf_r+0x50>
 8000a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8000a90:	d00b      	beq.n	8000aaa <_svfiprintf_r+0x7a>
 8000a92:	465b      	mov	r3, fp
 8000a94:	4622      	mov	r2, r4
 8000a96:	4629      	mov	r1, r5
 8000a98:	4638      	mov	r0, r7
 8000a9a:	f7ff ff6e 	bl	800097a <__ssputs_r>
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	f000 80aa 	beq.w	8000bf8 <_svfiprintf_r+0x1c8>
 8000aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000aa6:	445a      	add	r2, fp
 8000aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8000aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 80a2 	beq.w	8000bf8 <_svfiprintf_r+0x1c8>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000abe:	f10a 0a01 	add.w	sl, sl, #1
 8000ac2:	9304      	str	r3, [sp, #16]
 8000ac4:	9307      	str	r3, [sp, #28]
 8000ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000aca:	931a      	str	r3, [sp, #104]	; 0x68
 8000acc:	4654      	mov	r4, sl
 8000ace:	2205      	movs	r2, #5
 8000ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad4:	4851      	ldr	r0, [pc, #324]	; (8000c1c <_svfiprintf_r+0x1ec>)
 8000ad6:	f7ff fb83 	bl	80001e0 <memchr>
 8000ada:	9a04      	ldr	r2, [sp, #16]
 8000adc:	b9d8      	cbnz	r0, 8000b16 <_svfiprintf_r+0xe6>
 8000ade:	06d0      	lsls	r0, r2, #27
 8000ae0:	bf44      	itt	mi
 8000ae2:	2320      	movmi	r3, #32
 8000ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ae8:	0711      	lsls	r1, r2, #28
 8000aea:	bf44      	itt	mi
 8000aec:	232b      	movmi	r3, #43	; 0x2b
 8000aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000af2:	f89a 3000 	ldrb.w	r3, [sl]
 8000af6:	2b2a      	cmp	r3, #42	; 0x2a
 8000af8:	d015      	beq.n	8000b26 <_svfiprintf_r+0xf6>
 8000afa:	9a07      	ldr	r2, [sp, #28]
 8000afc:	4654      	mov	r4, sl
 8000afe:	2000      	movs	r0, #0
 8000b00:	f04f 0c0a 	mov.w	ip, #10
 8000b04:	4621      	mov	r1, r4
 8000b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b0a:	3b30      	subs	r3, #48	; 0x30
 8000b0c:	2b09      	cmp	r3, #9
 8000b0e:	d94e      	bls.n	8000bae <_svfiprintf_r+0x17e>
 8000b10:	b1b0      	cbz	r0, 8000b40 <_svfiprintf_r+0x110>
 8000b12:	9207      	str	r2, [sp, #28]
 8000b14:	e014      	b.n	8000b40 <_svfiprintf_r+0x110>
 8000b16:	eba0 0308 	sub.w	r3, r0, r8
 8000b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	9304      	str	r3, [sp, #16]
 8000b22:	46a2      	mov	sl, r4
 8000b24:	e7d2      	b.n	8000acc <_svfiprintf_r+0x9c>
 8000b26:	9b03      	ldr	r3, [sp, #12]
 8000b28:	1d19      	adds	r1, r3, #4
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	9103      	str	r1, [sp, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bfbb      	ittet	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	f042 0202 	orrlt.w	r2, r2, #2
 8000b38:	9307      	strge	r3, [sp, #28]
 8000b3a:	9307      	strlt	r3, [sp, #28]
 8000b3c:	bfb8      	it	lt
 8000b3e:	9204      	strlt	r2, [sp, #16]
 8000b40:	7823      	ldrb	r3, [r4, #0]
 8000b42:	2b2e      	cmp	r3, #46	; 0x2e
 8000b44:	d10c      	bne.n	8000b60 <_svfiprintf_r+0x130>
 8000b46:	7863      	ldrb	r3, [r4, #1]
 8000b48:	2b2a      	cmp	r3, #42	; 0x2a
 8000b4a:	d135      	bne.n	8000bb8 <_svfiprintf_r+0x188>
 8000b4c:	9b03      	ldr	r3, [sp, #12]
 8000b4e:	1d1a      	adds	r2, r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	9203      	str	r2, [sp, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bfb8      	it	lt
 8000b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b5c:	3402      	adds	r4, #2
 8000b5e:	9305      	str	r3, [sp, #20]
 8000b60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c2c <_svfiprintf_r+0x1fc>
 8000b64:	7821      	ldrb	r1, [r4, #0]
 8000b66:	2203      	movs	r2, #3
 8000b68:	4650      	mov	r0, sl
 8000b6a:	f7ff fb39 	bl	80001e0 <memchr>
 8000b6e:	b140      	cbz	r0, 8000b82 <_svfiprintf_r+0x152>
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	eba0 000a 	sub.w	r0, r0, sl
 8000b76:	fa03 f000 	lsl.w	r0, r3, r0
 8000b7a:	9b04      	ldr	r3, [sp, #16]
 8000b7c:	4303      	orrs	r3, r0
 8000b7e:	3401      	adds	r4, #1
 8000b80:	9304      	str	r3, [sp, #16]
 8000b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b86:	4826      	ldr	r0, [pc, #152]	; (8000c20 <_svfiprintf_r+0x1f0>)
 8000b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	f7ff fb27 	bl	80001e0 <memchr>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d038      	beq.n	8000c08 <_svfiprintf_r+0x1d8>
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <_svfiprintf_r+0x1f4>)
 8000b98:	bb1b      	cbnz	r3, 8000be2 <_svfiprintf_r+0x1b2>
 8000b9a:	9b03      	ldr	r3, [sp, #12]
 8000b9c:	3307      	adds	r3, #7
 8000b9e:	f023 0307 	bic.w	r3, r3, #7
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	9303      	str	r3, [sp, #12]
 8000ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ba8:	4433      	add	r3, r6
 8000baa:	9309      	str	r3, [sp, #36]	; 0x24
 8000bac:	e767      	b.n	8000a7e <_svfiprintf_r+0x4e>
 8000bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	e7a5      	b.n	8000b04 <_svfiprintf_r+0xd4>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	3401      	adds	r4, #1
 8000bbc:	9305      	str	r3, [sp, #20]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 0c0a 	mov.w	ip, #10
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bca:	3a30      	subs	r2, #48	; 0x30
 8000bcc:	2a09      	cmp	r2, #9
 8000bce:	d903      	bls.n	8000bd8 <_svfiprintf_r+0x1a8>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0c5      	beq.n	8000b60 <_svfiprintf_r+0x130>
 8000bd4:	9105      	str	r1, [sp, #20]
 8000bd6:	e7c3      	b.n	8000b60 <_svfiprintf_r+0x130>
 8000bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bdc:	4604      	mov	r4, r0
 8000bde:	2301      	movs	r3, #1
 8000be0:	e7f0      	b.n	8000bc4 <_svfiprintf_r+0x194>
 8000be2:	ab03      	add	r3, sp, #12
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	462a      	mov	r2, r5
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <_svfiprintf_r+0x1f8>)
 8000bea:	a904      	add	r1, sp, #16
 8000bec:	4638      	mov	r0, r7
 8000bee:	f3af 8000 	nop.w
 8000bf2:	1c42      	adds	r2, r0, #1
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	d1d6      	bne.n	8000ba6 <_svfiprintf_r+0x176>
 8000bf8:	89ab      	ldrh	r3, [r5, #12]
 8000bfa:	065b      	lsls	r3, r3, #25
 8000bfc:	f53f af2c 	bmi.w	8000a58 <_svfiprintf_r+0x28>
 8000c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c02:	b01d      	add	sp, #116	; 0x74
 8000c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c08:	ab03      	add	r3, sp, #12
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	462a      	mov	r2, r5
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <_svfiprintf_r+0x1f8>)
 8000c10:	a904      	add	r1, sp, #16
 8000c12:	4638      	mov	r0, r7
 8000c14:	f000 f87a 	bl	8000d0c <_printf_i>
 8000c18:	e7eb      	b.n	8000bf2 <_svfiprintf_r+0x1c2>
 8000c1a:	bf00      	nop
 8000c1c:	080011f4 	.word	0x080011f4
 8000c20:	080011fe 	.word	0x080011fe
 8000c24:	00000000 	.word	0x00000000
 8000c28:	0800097b 	.word	0x0800097b
 8000c2c:	080011fa 	.word	0x080011fa

08000c30 <_printf_common>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	4616      	mov	r6, r2
 8000c36:	4699      	mov	r9, r3
 8000c38:	688a      	ldr	r2, [r1, #8]
 8000c3a:	690b      	ldr	r3, [r1, #16]
 8000c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	bfb8      	it	lt
 8000c44:	4613      	movlt	r3, r2
 8000c46:	6033      	str	r3, [r6, #0]
 8000c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c4c:	4607      	mov	r7, r0
 8000c4e:	460c      	mov	r4, r1
 8000c50:	b10a      	cbz	r2, 8000c56 <_printf_common+0x26>
 8000c52:	3301      	adds	r3, #1
 8000c54:	6033      	str	r3, [r6, #0]
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	0699      	lsls	r1, r3, #26
 8000c5a:	bf42      	ittt	mi
 8000c5c:	6833      	ldrmi	r3, [r6, #0]
 8000c5e:	3302      	addmi	r3, #2
 8000c60:	6033      	strmi	r3, [r6, #0]
 8000c62:	6825      	ldr	r5, [r4, #0]
 8000c64:	f015 0506 	ands.w	r5, r5, #6
 8000c68:	d106      	bne.n	8000c78 <_printf_common+0x48>
 8000c6a:	f104 0a19 	add.w	sl, r4, #25
 8000c6e:	68e3      	ldr	r3, [r4, #12]
 8000c70:	6832      	ldr	r2, [r6, #0]
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	dc26      	bgt.n	8000cc6 <_printf_common+0x96>
 8000c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c7c:	1e13      	subs	r3, r2, #0
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	bf18      	it	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	0692      	lsls	r2, r2, #26
 8000c86:	d42b      	bmi.n	8000ce0 <_printf_common+0xb0>
 8000c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c8c:	4649      	mov	r1, r9
 8000c8e:	4638      	mov	r0, r7
 8000c90:	47c0      	blx	r8
 8000c92:	3001      	adds	r0, #1
 8000c94:	d01e      	beq.n	8000cd4 <_printf_common+0xa4>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	68e5      	ldr	r5, [r4, #12]
 8000c9a:	6832      	ldr	r2, [r6, #0]
 8000c9c:	f003 0306 	and.w	r3, r3, #6
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	bf08      	it	eq
 8000ca4:	1aad      	subeq	r5, r5, r2
 8000ca6:	68a3      	ldr	r3, [r4, #8]
 8000ca8:	6922      	ldr	r2, [r4, #16]
 8000caa:	bf0c      	ite	eq
 8000cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cb0:	2500      	movne	r5, #0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	bfc4      	itt	gt
 8000cb6:	1a9b      	subgt	r3, r3, r2
 8000cb8:	18ed      	addgt	r5, r5, r3
 8000cba:	2600      	movs	r6, #0
 8000cbc:	341a      	adds	r4, #26
 8000cbe:	42b5      	cmp	r5, r6
 8000cc0:	d11a      	bne.n	8000cf8 <_printf_common+0xc8>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	e008      	b.n	8000cd8 <_printf_common+0xa8>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4652      	mov	r2, sl
 8000cca:	4649      	mov	r1, r9
 8000ccc:	4638      	mov	r0, r7
 8000cce:	47c0      	blx	r8
 8000cd0:	3001      	adds	r0, #1
 8000cd2:	d103      	bne.n	8000cdc <_printf_common+0xac>
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	3501      	adds	r5, #1
 8000cde:	e7c6      	b.n	8000c6e <_printf_common+0x3e>
 8000ce0:	18e1      	adds	r1, r4, r3
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	2030      	movs	r0, #48	; 0x30
 8000ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cea:	4422      	add	r2, r4
 8000cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	e7c7      	b.n	8000c88 <_printf_common+0x58>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	4638      	mov	r0, r7
 8000d00:	47c0      	blx	r8
 8000d02:	3001      	adds	r0, #1
 8000d04:	d0e6      	beq.n	8000cd4 <_printf_common+0xa4>
 8000d06:	3601      	adds	r6, #1
 8000d08:	e7d9      	b.n	8000cbe <_printf_common+0x8e>
	...

08000d0c <_printf_i>:
 8000d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	460c      	mov	r4, r1
 8000d12:	4691      	mov	r9, r2
 8000d14:	7e27      	ldrb	r7, [r4, #24]
 8000d16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d18:	2f78      	cmp	r7, #120	; 0x78
 8000d1a:	4680      	mov	r8, r0
 8000d1c:	469a      	mov	sl, r3
 8000d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d22:	d807      	bhi.n	8000d34 <_printf_i+0x28>
 8000d24:	2f62      	cmp	r7, #98	; 0x62
 8000d26:	d80a      	bhi.n	8000d3e <_printf_i+0x32>
 8000d28:	2f00      	cmp	r7, #0
 8000d2a:	f000 80d8 	beq.w	8000ede <_printf_i+0x1d2>
 8000d2e:	2f58      	cmp	r7, #88	; 0x58
 8000d30:	f000 80a3 	beq.w	8000e7a <_printf_i+0x16e>
 8000d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d3c:	e03a      	b.n	8000db4 <_printf_i+0xa8>
 8000d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d42:	2b15      	cmp	r3, #21
 8000d44:	d8f6      	bhi.n	8000d34 <_printf_i+0x28>
 8000d46:	a001      	add	r0, pc, #4	; (adr r0, 8000d4c <_printf_i+0x40>)
 8000d48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d4c:	08000da5 	.word	0x08000da5
 8000d50:	08000db9 	.word	0x08000db9
 8000d54:	08000d35 	.word	0x08000d35
 8000d58:	08000d35 	.word	0x08000d35
 8000d5c:	08000d35 	.word	0x08000d35
 8000d60:	08000d35 	.word	0x08000d35
 8000d64:	08000db9 	.word	0x08000db9
 8000d68:	08000d35 	.word	0x08000d35
 8000d6c:	08000d35 	.word	0x08000d35
 8000d70:	08000d35 	.word	0x08000d35
 8000d74:	08000d35 	.word	0x08000d35
 8000d78:	08000ec5 	.word	0x08000ec5
 8000d7c:	08000de9 	.word	0x08000de9
 8000d80:	08000ea7 	.word	0x08000ea7
 8000d84:	08000d35 	.word	0x08000d35
 8000d88:	08000d35 	.word	0x08000d35
 8000d8c:	08000ee7 	.word	0x08000ee7
 8000d90:	08000d35 	.word	0x08000d35
 8000d94:	08000de9 	.word	0x08000de9
 8000d98:	08000d35 	.word	0x08000d35
 8000d9c:	08000d35 	.word	0x08000d35
 8000da0:	08000eaf 	.word	0x08000eaf
 8000da4:	680b      	ldr	r3, [r1, #0]
 8000da6:	1d1a      	adds	r2, r3, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	600a      	str	r2, [r1, #0]
 8000dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000db4:	2301      	movs	r3, #1
 8000db6:	e0a3      	b.n	8000f00 <_printf_i+0x1f4>
 8000db8:	6825      	ldr	r5, [r4, #0]
 8000dba:	6808      	ldr	r0, [r1, #0]
 8000dbc:	062e      	lsls	r6, r5, #24
 8000dbe:	f100 0304 	add.w	r3, r0, #4
 8000dc2:	d50a      	bpl.n	8000dda <_printf_i+0xce>
 8000dc4:	6805      	ldr	r5, [r0, #0]
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	da03      	bge.n	8000dd4 <_printf_i+0xc8>
 8000dcc:	232d      	movs	r3, #45	; 0x2d
 8000dce:	426d      	negs	r5, r5
 8000dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dd4:	485e      	ldr	r0, [pc, #376]	; (8000f50 <_printf_i+0x244>)
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	e019      	b.n	8000e0e <_printf_i+0x102>
 8000dda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000dde:	6805      	ldr	r5, [r0, #0]
 8000de0:	600b      	str	r3, [r1, #0]
 8000de2:	bf18      	it	ne
 8000de4:	b22d      	sxthne	r5, r5
 8000de6:	e7ef      	b.n	8000dc8 <_printf_i+0xbc>
 8000de8:	680b      	ldr	r3, [r1, #0]
 8000dea:	6825      	ldr	r5, [r4, #0]
 8000dec:	1d18      	adds	r0, r3, #4
 8000dee:	6008      	str	r0, [r1, #0]
 8000df0:	0628      	lsls	r0, r5, #24
 8000df2:	d501      	bpl.n	8000df8 <_printf_i+0xec>
 8000df4:	681d      	ldr	r5, [r3, #0]
 8000df6:	e002      	b.n	8000dfe <_printf_i+0xf2>
 8000df8:	0669      	lsls	r1, r5, #25
 8000dfa:	d5fb      	bpl.n	8000df4 <_printf_i+0xe8>
 8000dfc:	881d      	ldrh	r5, [r3, #0]
 8000dfe:	4854      	ldr	r0, [pc, #336]	; (8000f50 <_printf_i+0x244>)
 8000e00:	2f6f      	cmp	r7, #111	; 0x6f
 8000e02:	bf0c      	ite	eq
 8000e04:	2308      	moveq	r3, #8
 8000e06:	230a      	movne	r3, #10
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e0e:	6866      	ldr	r6, [r4, #4]
 8000e10:	60a6      	str	r6, [r4, #8]
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	bfa2      	ittt	ge
 8000e16:	6821      	ldrge	r1, [r4, #0]
 8000e18:	f021 0104 	bicge.w	r1, r1, #4
 8000e1c:	6021      	strge	r1, [r4, #0]
 8000e1e:	b90d      	cbnz	r5, 8000e24 <_printf_i+0x118>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d04d      	beq.n	8000ec0 <_printf_i+0x1b4>
 8000e24:	4616      	mov	r6, r2
 8000e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e2e:	5dc7      	ldrb	r7, [r0, r7]
 8000e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e34:	462f      	mov	r7, r5
 8000e36:	42bb      	cmp	r3, r7
 8000e38:	460d      	mov	r5, r1
 8000e3a:	d9f4      	bls.n	8000e26 <_printf_i+0x11a>
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d10b      	bne.n	8000e58 <_printf_i+0x14c>
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	07df      	lsls	r7, r3, #31
 8000e44:	d508      	bpl.n	8000e58 <_printf_i+0x14c>
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	6861      	ldr	r1, [r4, #4]
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	bfde      	ittt	le
 8000e4e:	2330      	movle	r3, #48	; 0x30
 8000e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e58:	1b92      	subs	r2, r2, r6
 8000e5a:	6122      	str	r2, [r4, #16]
 8000e5c:	f8cd a000 	str.w	sl, [sp]
 8000e60:	464b      	mov	r3, r9
 8000e62:	aa03      	add	r2, sp, #12
 8000e64:	4621      	mov	r1, r4
 8000e66:	4640      	mov	r0, r8
 8000e68:	f7ff fee2 	bl	8000c30 <_printf_common>
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d14c      	bne.n	8000f0a <_printf_i+0x1fe>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	b004      	add	sp, #16
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	4835      	ldr	r0, [pc, #212]	; (8000f50 <_printf_i+0x244>)
 8000e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	680e      	ldr	r6, [r1, #0]
 8000e84:	061f      	lsls	r7, r3, #24
 8000e86:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e8a:	600e      	str	r6, [r1, #0]
 8000e8c:	d514      	bpl.n	8000eb8 <_printf_i+0x1ac>
 8000e8e:	07d9      	lsls	r1, r3, #31
 8000e90:	bf44      	itt	mi
 8000e92:	f043 0320 	orrmi.w	r3, r3, #32
 8000e96:	6023      	strmi	r3, [r4, #0]
 8000e98:	b91d      	cbnz	r5, 8000ea2 <_printf_i+0x196>
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	f023 0320 	bic.w	r3, r3, #32
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	e7b0      	b.n	8000e08 <_printf_i+0xfc>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	2378      	movs	r3, #120	; 0x78
 8000eb0:	4828      	ldr	r0, [pc, #160]	; (8000f54 <_printf_i+0x248>)
 8000eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000eb6:	e7e3      	b.n	8000e80 <_printf_i+0x174>
 8000eb8:	065e      	lsls	r6, r3, #25
 8000eba:	bf48      	it	mi
 8000ebc:	b2ad      	uxthmi	r5, r5
 8000ebe:	e7e6      	b.n	8000e8e <_printf_i+0x182>
 8000ec0:	4616      	mov	r6, r2
 8000ec2:	e7bb      	b.n	8000e3c <_printf_i+0x130>
 8000ec4:	680b      	ldr	r3, [r1, #0]
 8000ec6:	6826      	ldr	r6, [r4, #0]
 8000ec8:	6960      	ldr	r0, [r4, #20]
 8000eca:	1d1d      	adds	r5, r3, #4
 8000ecc:	600d      	str	r5, [r1, #0]
 8000ece:	0635      	lsls	r5, r6, #24
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	d501      	bpl.n	8000ed8 <_printf_i+0x1cc>
 8000ed4:	6018      	str	r0, [r3, #0]
 8000ed6:	e002      	b.n	8000ede <_printf_i+0x1d2>
 8000ed8:	0671      	lsls	r1, r6, #25
 8000eda:	d5fb      	bpl.n	8000ed4 <_printf_i+0x1c8>
 8000edc:	8018      	strh	r0, [r3, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6123      	str	r3, [r4, #16]
 8000ee2:	4616      	mov	r6, r2
 8000ee4:	e7ba      	b.n	8000e5c <_printf_i+0x150>
 8000ee6:	680b      	ldr	r3, [r1, #0]
 8000ee8:	1d1a      	adds	r2, r3, #4
 8000eea:	600a      	str	r2, [r1, #0]
 8000eec:	681e      	ldr	r6, [r3, #0]
 8000eee:	6862      	ldr	r2, [r4, #4]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f7ff f974 	bl	80001e0 <memchr>
 8000ef8:	b108      	cbz	r0, 8000efe <_printf_i+0x1f2>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	6060      	str	r0, [r4, #4]
 8000efe:	6863      	ldr	r3, [r4, #4]
 8000f00:	6123      	str	r3, [r4, #16]
 8000f02:	2300      	movs	r3, #0
 8000f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f08:	e7a8      	b.n	8000e5c <_printf_i+0x150>
 8000f0a:	6923      	ldr	r3, [r4, #16]
 8000f0c:	4632      	mov	r2, r6
 8000f0e:	4649      	mov	r1, r9
 8000f10:	4640      	mov	r0, r8
 8000f12:	47d0      	blx	sl
 8000f14:	3001      	adds	r0, #1
 8000f16:	d0ab      	beq.n	8000e70 <_printf_i+0x164>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	079b      	lsls	r3, r3, #30
 8000f1c:	d413      	bmi.n	8000f46 <_printf_i+0x23a>
 8000f1e:	68e0      	ldr	r0, [r4, #12]
 8000f20:	9b03      	ldr	r3, [sp, #12]
 8000f22:	4298      	cmp	r0, r3
 8000f24:	bfb8      	it	lt
 8000f26:	4618      	movlt	r0, r3
 8000f28:	e7a4      	b.n	8000e74 <_printf_i+0x168>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4632      	mov	r2, r6
 8000f2e:	4649      	mov	r1, r9
 8000f30:	4640      	mov	r0, r8
 8000f32:	47d0      	blx	sl
 8000f34:	3001      	adds	r0, #1
 8000f36:	d09b      	beq.n	8000e70 <_printf_i+0x164>
 8000f38:	3501      	adds	r5, #1
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	9903      	ldr	r1, [sp, #12]
 8000f3e:	1a5b      	subs	r3, r3, r1
 8000f40:	42ab      	cmp	r3, r5
 8000f42:	dcf2      	bgt.n	8000f2a <_printf_i+0x21e>
 8000f44:	e7eb      	b.n	8000f1e <_printf_i+0x212>
 8000f46:	2500      	movs	r5, #0
 8000f48:	f104 0619 	add.w	r6, r4, #25
 8000f4c:	e7f5      	b.n	8000f3a <_printf_i+0x22e>
 8000f4e:	bf00      	nop
 8000f50:	08001205 	.word	0x08001205
 8000f54:	08001216 	.word	0x08001216

08000f58 <memcpy>:
 8000f58:	440a      	add	r2, r1
 8000f5a:	4291      	cmp	r1, r2
 8000f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f60:	d100      	bne.n	8000f64 <memcpy+0xc>
 8000f62:	4770      	bx	lr
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d1f9      	bne.n	8000f66 <memcpy+0xe>
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <memmove>:
 8000f74:	4288      	cmp	r0, r1
 8000f76:	b510      	push	{r4, lr}
 8000f78:	eb01 0402 	add.w	r4, r1, r2
 8000f7c:	d902      	bls.n	8000f84 <memmove+0x10>
 8000f7e:	4284      	cmp	r4, r0
 8000f80:	4623      	mov	r3, r4
 8000f82:	d807      	bhi.n	8000f94 <memmove+0x20>
 8000f84:	1e43      	subs	r3, r0, #1
 8000f86:	42a1      	cmp	r1, r4
 8000f88:	d008      	beq.n	8000f9c <memmove+0x28>
 8000f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f92:	e7f8      	b.n	8000f86 <memmove+0x12>
 8000f94:	4402      	add	r2, r0
 8000f96:	4601      	mov	r1, r0
 8000f98:	428a      	cmp	r2, r1
 8000f9a:	d100      	bne.n	8000f9e <memmove+0x2a>
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fa6:	e7f7      	b.n	8000f98 <memmove+0x24>

08000fa8 <_free_r>:
 8000fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000faa:	2900      	cmp	r1, #0
 8000fac:	d048      	beq.n	8001040 <_free_r+0x98>
 8000fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fb2:	9001      	str	r0, [sp, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8000fba:	bfb8      	it	lt
 8000fbc:	18e4      	addlt	r4, r4, r3
 8000fbe:	f000 f8d3 	bl	8001168 <__malloc_lock>
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <_free_r+0x9c>)
 8000fc4:	9801      	ldr	r0, [sp, #4]
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	4615      	mov	r5, r2
 8000fca:	b933      	cbnz	r3, 8000fda <_free_r+0x32>
 8000fcc:	6063      	str	r3, [r4, #4]
 8000fce:	6014      	str	r4, [r2, #0]
 8000fd0:	b003      	add	sp, #12
 8000fd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fd6:	f000 b8cd 	b.w	8001174 <__malloc_unlock>
 8000fda:	42a3      	cmp	r3, r4
 8000fdc:	d90b      	bls.n	8000ff6 <_free_r+0x4e>
 8000fde:	6821      	ldr	r1, [r4, #0]
 8000fe0:	1862      	adds	r2, r4, r1
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	bf04      	itt	eq
 8000fe6:	681a      	ldreq	r2, [r3, #0]
 8000fe8:	685b      	ldreq	r3, [r3, #4]
 8000fea:	6063      	str	r3, [r4, #4]
 8000fec:	bf04      	itt	eq
 8000fee:	1852      	addeq	r2, r2, r1
 8000ff0:	6022      	streq	r2, [r4, #0]
 8000ff2:	602c      	str	r4, [r5, #0]
 8000ff4:	e7ec      	b.n	8000fd0 <_free_r+0x28>
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	b10b      	cbz	r3, 8001000 <_free_r+0x58>
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	d9fa      	bls.n	8000ff6 <_free_r+0x4e>
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	1855      	adds	r5, r2, r1
 8001004:	42a5      	cmp	r5, r4
 8001006:	d10b      	bne.n	8001020 <_free_r+0x78>
 8001008:	6824      	ldr	r4, [r4, #0]
 800100a:	4421      	add	r1, r4
 800100c:	1854      	adds	r4, r2, r1
 800100e:	42a3      	cmp	r3, r4
 8001010:	6011      	str	r1, [r2, #0]
 8001012:	d1dd      	bne.n	8000fd0 <_free_r+0x28>
 8001014:	681c      	ldr	r4, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	6053      	str	r3, [r2, #4]
 800101a:	4421      	add	r1, r4
 800101c:	6011      	str	r1, [r2, #0]
 800101e:	e7d7      	b.n	8000fd0 <_free_r+0x28>
 8001020:	d902      	bls.n	8001028 <_free_r+0x80>
 8001022:	230c      	movs	r3, #12
 8001024:	6003      	str	r3, [r0, #0]
 8001026:	e7d3      	b.n	8000fd0 <_free_r+0x28>
 8001028:	6825      	ldr	r5, [r4, #0]
 800102a:	1961      	adds	r1, r4, r5
 800102c:	428b      	cmp	r3, r1
 800102e:	bf04      	itt	eq
 8001030:	6819      	ldreq	r1, [r3, #0]
 8001032:	685b      	ldreq	r3, [r3, #4]
 8001034:	6063      	str	r3, [r4, #4]
 8001036:	bf04      	itt	eq
 8001038:	1949      	addeq	r1, r1, r5
 800103a:	6021      	streq	r1, [r4, #0]
 800103c:	6054      	str	r4, [r2, #4]
 800103e:	e7c7      	b.n	8000fd0 <_free_r+0x28>
 8001040:	b003      	add	sp, #12
 8001042:	bd30      	pop	{r4, r5, pc}
 8001044:	20000084 	.word	0x20000084

08001048 <_malloc_r>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	1ccd      	adds	r5, r1, #3
 800104c:	f025 0503 	bic.w	r5, r5, #3
 8001050:	3508      	adds	r5, #8
 8001052:	2d0c      	cmp	r5, #12
 8001054:	bf38      	it	cc
 8001056:	250c      	movcc	r5, #12
 8001058:	2d00      	cmp	r5, #0
 800105a:	4606      	mov	r6, r0
 800105c:	db01      	blt.n	8001062 <_malloc_r+0x1a>
 800105e:	42a9      	cmp	r1, r5
 8001060:	d903      	bls.n	800106a <_malloc_r+0x22>
 8001062:	230c      	movs	r3, #12
 8001064:	6033      	str	r3, [r6, #0]
 8001066:	2000      	movs	r0, #0
 8001068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800106a:	f000 f87d 	bl	8001168 <__malloc_lock>
 800106e:	4921      	ldr	r1, [pc, #132]	; (80010f4 <_malloc_r+0xac>)
 8001070:	680a      	ldr	r2, [r1, #0]
 8001072:	4614      	mov	r4, r2
 8001074:	b99c      	cbnz	r4, 800109e <_malloc_r+0x56>
 8001076:	4f20      	ldr	r7, [pc, #128]	; (80010f8 <_malloc_r+0xb0>)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b923      	cbnz	r3, 8001086 <_malloc_r+0x3e>
 800107c:	4621      	mov	r1, r4
 800107e:	4630      	mov	r0, r6
 8001080:	f000 f862 	bl	8001148 <_sbrk_r>
 8001084:	6038      	str	r0, [r7, #0]
 8001086:	4629      	mov	r1, r5
 8001088:	4630      	mov	r0, r6
 800108a:	f000 f85d 	bl	8001148 <_sbrk_r>
 800108e:	1c43      	adds	r3, r0, #1
 8001090:	d123      	bne.n	80010da <_malloc_r+0x92>
 8001092:	230c      	movs	r3, #12
 8001094:	6033      	str	r3, [r6, #0]
 8001096:	4630      	mov	r0, r6
 8001098:	f000 f86c 	bl	8001174 <__malloc_unlock>
 800109c:	e7e3      	b.n	8001066 <_malloc_r+0x1e>
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	1b5b      	subs	r3, r3, r5
 80010a2:	d417      	bmi.n	80010d4 <_malloc_r+0x8c>
 80010a4:	2b0b      	cmp	r3, #11
 80010a6:	d903      	bls.n	80010b0 <_malloc_r+0x68>
 80010a8:	6023      	str	r3, [r4, #0]
 80010aa:	441c      	add	r4, r3
 80010ac:	6025      	str	r5, [r4, #0]
 80010ae:	e004      	b.n	80010ba <_malloc_r+0x72>
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	42a2      	cmp	r2, r4
 80010b4:	bf0c      	ite	eq
 80010b6:	600b      	streq	r3, [r1, #0]
 80010b8:	6053      	strne	r3, [r2, #4]
 80010ba:	4630      	mov	r0, r6
 80010bc:	f000 f85a 	bl	8001174 <__malloc_unlock>
 80010c0:	f104 000b 	add.w	r0, r4, #11
 80010c4:	1d23      	adds	r3, r4, #4
 80010c6:	f020 0007 	bic.w	r0, r0, #7
 80010ca:	1ac2      	subs	r2, r0, r3
 80010cc:	d0cc      	beq.n	8001068 <_malloc_r+0x20>
 80010ce:	1a1b      	subs	r3, r3, r0
 80010d0:	50a3      	str	r3, [r4, r2]
 80010d2:	e7c9      	b.n	8001068 <_malloc_r+0x20>
 80010d4:	4622      	mov	r2, r4
 80010d6:	6864      	ldr	r4, [r4, #4]
 80010d8:	e7cc      	b.n	8001074 <_malloc_r+0x2c>
 80010da:	1cc4      	adds	r4, r0, #3
 80010dc:	f024 0403 	bic.w	r4, r4, #3
 80010e0:	42a0      	cmp	r0, r4
 80010e2:	d0e3      	beq.n	80010ac <_malloc_r+0x64>
 80010e4:	1a21      	subs	r1, r4, r0
 80010e6:	4630      	mov	r0, r6
 80010e8:	f000 f82e 	bl	8001148 <_sbrk_r>
 80010ec:	3001      	adds	r0, #1
 80010ee:	d1dd      	bne.n	80010ac <_malloc_r+0x64>
 80010f0:	e7cf      	b.n	8001092 <_malloc_r+0x4a>
 80010f2:	bf00      	nop
 80010f4:	20000084 	.word	0x20000084
 80010f8:	20000088 	.word	0x20000088

080010fc <_realloc_r>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	4607      	mov	r7, r0
 8001100:	4614      	mov	r4, r2
 8001102:	460e      	mov	r6, r1
 8001104:	b921      	cbnz	r1, 8001110 <_realloc_r+0x14>
 8001106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800110a:	4611      	mov	r1, r2
 800110c:	f7ff bf9c 	b.w	8001048 <_malloc_r>
 8001110:	b922      	cbnz	r2, 800111c <_realloc_r+0x20>
 8001112:	f7ff ff49 	bl	8000fa8 <_free_r>
 8001116:	4625      	mov	r5, r4
 8001118:	4628      	mov	r0, r5
 800111a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800111c:	f000 f830 	bl	8001180 <_malloc_usable_size_r>
 8001120:	42a0      	cmp	r0, r4
 8001122:	d20f      	bcs.n	8001144 <_realloc_r+0x48>
 8001124:	4621      	mov	r1, r4
 8001126:	4638      	mov	r0, r7
 8001128:	f7ff ff8e 	bl	8001048 <_malloc_r>
 800112c:	4605      	mov	r5, r0
 800112e:	2800      	cmp	r0, #0
 8001130:	d0f2      	beq.n	8001118 <_realloc_r+0x1c>
 8001132:	4631      	mov	r1, r6
 8001134:	4622      	mov	r2, r4
 8001136:	f7ff ff0f 	bl	8000f58 <memcpy>
 800113a:	4631      	mov	r1, r6
 800113c:	4638      	mov	r0, r7
 800113e:	f7ff ff33 	bl	8000fa8 <_free_r>
 8001142:	e7e9      	b.n	8001118 <_realloc_r+0x1c>
 8001144:	4635      	mov	r5, r6
 8001146:	e7e7      	b.n	8001118 <_realloc_r+0x1c>

08001148 <_sbrk_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4d06      	ldr	r5, [pc, #24]	; (8001164 <_sbrk_r+0x1c>)
 800114c:	2300      	movs	r3, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	602b      	str	r3, [r5, #0]
 8001154:	f7ff fb48 	bl	80007e8 <_sbrk>
 8001158:	1c43      	adds	r3, r0, #1
 800115a:	d102      	bne.n	8001162 <_sbrk_r+0x1a>
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	b103      	cbz	r3, 8001162 <_sbrk_r+0x1a>
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	2000008c 	.word	0x2000008c

08001168 <__malloc_lock>:
 8001168:	4801      	ldr	r0, [pc, #4]	; (8001170 <__malloc_lock+0x8>)
 800116a:	f000 b811 	b.w	8001190 <__retarget_lock_acquire_recursive>
 800116e:	bf00      	nop
 8001170:	20000094 	.word	0x20000094

08001174 <__malloc_unlock>:
 8001174:	4801      	ldr	r0, [pc, #4]	; (800117c <__malloc_unlock+0x8>)
 8001176:	f000 b80c 	b.w	8001192 <__retarget_lock_release_recursive>
 800117a:	bf00      	nop
 800117c:	20000094 	.word	0x20000094

08001180 <_malloc_usable_size_r>:
 8001180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001184:	1f18      	subs	r0, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	bfbc      	itt	lt
 800118a:	580b      	ldrlt	r3, [r1, r0]
 800118c:	18c0      	addlt	r0, r0, r3
 800118e:	4770      	bx	lr

08001190 <__retarget_lock_acquire_recursive>:
 8001190:	4770      	bx	lr

08001192 <__retarget_lock_release_recursive>:
 8001192:	4770      	bx	lr

08001194 <_init>:
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	bf00      	nop
 8001198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119a:	bc08      	pop	{r3}
 800119c:	469e      	mov	lr, r3
 800119e:	4770      	bx	lr

080011a0 <_fini>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	bf00      	nop
 80011a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a6:	bc08      	pop	{r3}
 80011a8:	469e      	mov	lr, r3
 80011aa:	4770      	bx	lr
